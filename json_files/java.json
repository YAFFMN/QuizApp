[
    {
        "question": "How do you define a class in Java?",
        "option_1": "class ClassName { // body }",
        "option_2": "public ClassName() { // body }",
        "option_3": "class ClassName() { // body }",
        "option_4": "def ClassName { // body }",
        "answer": "class ClassName { // body }"
    },
    {
        "question": "What is the purpose of the 'public' keyword in Java?",
        "option_1": "To specify that a class or method is accessible from other classes",
        "option_2": "To define a constant value",
        "option_3": "To handle exceptions",
        "option_4": "To create a new thread",
        "answer": "To specify that a class or method is accessible from other classes"
    },
    {
        "question": "How do you define a method that does not return a value in Java?",
        "option_1": "void methodName() { // body }",
        "option_2": "methodName() { // body }",
        "option_3": "public methodName() { // body }",
        "option_4": "return methodName() { // body }",
        "answer": "void methodName() { // body }"
    },
    {
        "question": "What is the output of 'System.out.println(10 + 20 + \"30\")' in Java?",
        "option_1": "3030",
        "option_2": "1030",
        "option_3": "Error",
        "option_4": "1030",
        "answer": "3030"
    },
    {
        "question": "How do you create an array in Java?",
        "option_1": "type[] arrayName = new type[size];",
        "option_2": "type arrayName = new type[size];",
        "option_3": "arrayName = new type[size];",
        "option_4": "type[] arrayName = size;",
        "answer": "type[] arrayName = new type[size];"
    },
    {
        "question": "What is the purpose of the 'static' keyword in Java?",
        "option_1": "To define class-level methods and variables",
        "option_2": "To handle exceptions",
        "option_3": "To create an instance of a class",
        "option_4": "To create an abstract class",
        "answer": "To define class-level methods and variables"
    },
    {
        "question": "How do you handle exceptions in Java?",
        "option_1": "Using try-catch blocks",
        "option_2": "Using if-else statements",
        "option_3": "Using switch-case statements",
        "option_4": "Using error codes",
        "answer": "Using try-catch blocks"
    },
    {
        "question": "What is the purpose of the 'this' keyword in Java?",
        "option_1": "To refer to the current instance of the class",
        "option_2": "To define a new class",
        "option_3": "To initialize a variable",
        "option_4": "To create a static method",
        "answer": "To refer to the current instance of the class"
    },
    {
        "question": "How do you define a constructor in Java?",
        "option_1": "public ClassName() { // body }",
        "option_2": "public void ClassName() { // body }",
        "option_3": "ClassName() { // body }",
        "option_4": "static ClassName() { // body }",
        "answer": "public ClassName() { // body }"
    },
    {
        "question": "What is the output of 'System.out.println(\"Hello\".length())' in Java?",
        "option_1": "5",
        "option_2": "Hello",
        "option_3": "Error",
        "option_4": "Hello.length",
        "answer": "5"
    },{
        "question": "How do you define an interface in Java?",
        "option_1": "interface InterfaceName { // methods }",
        "option_2": "class InterfaceName { // methods }",
        "option_3": "public InterfaceName { // methods }",
        "option_4": "abstract class InterfaceName { // methods }",
        "answer": "interface InterfaceName { // methods }"
    },
    {
        "question": "What does the 'super' keyword do in Java?",
        "option_1": "Refers to the superclass of the current object",
        "option_2": "Defines a static method",
        "option_3": "Creates a new instance of a class",
        "option_4": "Handles exceptions",
        "answer": "Refers to the superclass of the current object"
    },
    {
        "question": "What is the output of 'System.out.println(5 / 2)' in Java?",
        "option_1": "2",
        "option_2": "2.5",
        "option_3": "Error",
        "option_4": "2.0",
        "answer": "2"
    },
    {
        "question": "How do you declare a package in Java?",
        "option_1": "package packageName;",
        "option_2": "import packageName;",
        "option_3": "define packageName;",
        "option_4": "namespace packageName;",
        "answer": "package packageName;"
    },
    {
        "question": "What is the difference between '== 'and '.equals()' in Java?",
        "option_1": "'==' checks for reference equality, '.equals()' checks for value equality",
        "option_2": "'==' checks for value equality, '.equals()' checks for reference equality",
        "option_3": "There is no difference",
        "option_4": "'==' is used for primitive types, '.equals()' is used for objects",
        "answer": "'==' checks for reference equality, '.equals()' checks for value equality"
    },
    {
        "question": "How do you make a class abstract in Java?",
        "option_1": "By using the 'abstract' keyword",
        "option_2": "By using the 'static' keyword",
        "option_3": "By using the 'final' keyword",
        "option_4": "By using the 'synchronized' keyword",
        "answer": "By using the 'abstract' keyword"
    },
    {
        "question": "What is the output of 'System.out.println(\"Java\".substring(1, 3))'?",
        "option_1": "av",
        "option_2": "Java",
        "option_3": "Ja",
        "option_4": "Error",
        "answer": "av"
    },
    {
        "question": "How do you create a thread in Java?",
        "option_1": "By extending the Thread class or implementing the Runnable interface",
        "option_2": "By using the Thread.create() method",
        "option_3": "By using the startThread() method",
        "option_4": "By defining a thread method in a class",
        "answer": "By extending the Thread class or implementing the Runnable interface"
    },
    {
        "question": "What does the 'final' keyword signify in Java?",
        "option_1": "It defines constants, prevents method overriding, and inheritance",
        "option_2": "It defines a static method",
        "option_3": "It specifies abstract methods",
        "option_4": "It is used to create new instances",
        "answer": "It defines constants, prevents method overriding, and inheritance"
    },
    {
        "question": "How do you perform type casting in Java?",
        "option_1": "By using parentheses, e.g., (type)value",
        "option_2": "By using the cast() method",
        "option_3": "By using the convert() method",
        "option_4": "By using the as keyword",
        "answer": "By using parentheses, e.g., (type)value"
    },
    {
        "question": "What is an 'enum' in Java?",
        "option_1": "A special class used to define a set of constants",
        "option_2": "A data type that can hold any value",
        "option_3": "A method to handle exceptions",
        "option_4": "A way to define abstract methods",
        "answer": "A special class used to define a set of constants"
    },
    {
        "question": "How do you concatenate strings in Java?",
        "option_1": "Using the '+' operator",
        "option_2": "Using the append() method",
        "option_3": "Using the concat() method",
        "option_4": "Using the join() method",
        "answer": "Using the '+' operator"
    },
    {
        "question": "What does the 'super()' call do in a constructor?",
        "option_1": "It invokes the constructor of the superclass",
        "option_2": "It defines a new method",
        "option_3": "It creates a new instance of the class",
        "option_4": "It initializes a variable",
        "answer": "It invokes the constructor of the superclass"
    },
    {
        "question": "What is the output of 'System.out.println(10 % 3)' in Java?",
        "option_1": "1",
        "option_2": "3",
        "option_3": "10",
        "option_4": "Error",
        "answer": "1"
    }
]